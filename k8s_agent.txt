https://github.com/jenkinsci/git-plugin/blob/018cb57f7e6c5fb03add5307f79aecbd757a1aca/src/main/java/hudson/plugins/git/util/DefaultBuildChooser.java#L251

Step 1: Create the Service Account and Role
oc create serviceaccount jenkins -n your-namespace

oc create role jenkins-role --verb=create,delete --resource=pods -n your-namespace

oc create rolebinding jenkins-role-binding --role=jenkins-role --serviceaccount=your-namespace:jenkins -n your-namespace

Step 2: Create a Docker Registry Secret
oc create secret docker-registry my-docker-secret \
--docker-server=<your-docker-registry> \
--docker-username=<your-username> \
--docker-password=<your-password> \
--docker-email=<your-email> \
-n your-namespace

oc secrets link jenkins my-docker-secret --for=pull -n your-namespace


Step 3: Retrieve the Service Account Token
oc sa get-token jenkins -n your-namespace


Jenkins Configuration
Add Service Account Token as Secret:

Go to Manage Jenkins > Manage Credentials > Global credentials (unrestricted) > Add Credentials.

Choose Secret text and paste the service account token.

Give it an ID like jenkins-sa-token.

Configure Kubernetes Cloud:

Go to Manage Jenkins > Manage Nodes and Clouds > Configure Clouds.

Add a new cloud and select Kubernetes.

Fill in the Kubernetes API URL (e.g., https://kubernetes.default.svc).

Use the credential ID jenkins-sa-token you just created.

Under Pod Templates, define the pod template using the YAML configuration above.

pipeline {
    agent {
        kubernetes {
            yaml """
            apiVersion: v1
            kind: Pod
            metadata:
              name: jenkins-agent
            spec:
              serviceAccountName: jenkins
              containers:
              - name: jnlp
                image: jenkins/inbound-agent:latest
                args: ['$(JENKINS_SECRET)', '$(JENKINS_NAME)']
                volumeMounts:
                - name: docker-socket
                  mountPath: /var/run/docker.sock
                - name: docker-config
                  mountPath: /root/.docker
              volumes:
              - name: docker-socket
                hostPath:
                  path: /var/run/docker.sock
              - name: docker-config
                secret:
                  secretName: my-docker-secret
            """
        }
    }
    stages {
        stage('Build') {
            steps {
                echo 'Building...'
            }
        }
    }
}


We are currently conducting a review of Jenkins security and have two questions that need clarification:

Jenkins Authentication: If we use Kerberos for authentication, what Identity Providers (IdPs) does IAM currently offer?

CKS Support for Kerberos Accounts: Currently, CKS supports only one Kerberos account per namespace. What solutions are available to address this limitation?

Regarding the first question, Jenkins supports various authentication methods, including Kerberos. To configure Kerberos authentication in Jenkins, you can use the Kerberos SSO Plugin, which authenticates users based on Kerberos ticket negotiation. As for the Identity Providers (IdPs) offered by your Identity and Access Management (IAM) system, it depends on the specific IAM service you are using. Common IdPs include Active Directory and LDAP. It's advisable to consult your IAM service documentation to determine its support for Kerberos.

For the second question, if "CKS" refers to a specific Kubernetes service that restricts each namespace to a single Kerberos account, you might consider the following approaches:

Namespace Management: Create separate namespaces for different teams or projects, each with its own Kerberos account. This approach aligns with Kubernetes' design, where service accounts are namespace-scoped.

Role Binding: Utilize RoleBindings or ClusterRoleBindings to assign specific permissions to users or service accounts across namespaces. This method allows for more granular access control without being limited to one Kerberos account per namespace.

The optimal solution depends on your specific environment and requirements. It's recommended to discuss these options with your system administrators or security team to determine the best course of action.

