myapp-gitops/
├── clusters/
│   ├── dev/
│   │   ├── kustomization.yaml
│   │   ├── helmrelease.yaml
│   │   └── values.yaml
│   └── prod/
│       ├── kustomization.yaml
│       ├── helmrelease.yaml
│       └── values.yaml
├── infrastructure/
│   └── helmrepo-myapp.yaml


1. infrastructure/helmrepo-myapp.yaml – Define the Helm repository
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: myapp-helm
  namespace: flux-system
spec:
  interval: 1m
  url: https://charts.example.com/

2. clusters/dev/helmrelease.yaml – HelmRelease for Dev
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: myapp
  namespace: dev
spec:
  releaseName: myapp-dev
  interval: 5m
  chart:
    spec:
      chart: myapp
      version: "~1.2.0"
      sourceRef:
        kind: HelmRepository
        name: myapp-helm
        namespace: flux-system
  valuesFrom:
    - kind: ConfigMap
      name: myapp-values
      valuesKey: values.yaml


3. clusters/dev/values.yaml – Environment-specific overrides
replicaCount: 1
image:
  repository: mycompany/myapp
  tag: "dev-1234"
service:
  type: ClusterIP


4. clusters/dev/kustomization.yaml
apiVersion: kustomize.toolkit.fluxcd.io/v1
kind: Kustomization
metadata:
  name: myapp-dev
  namespace: flux-system
spec:
  interval: 1m
  path: ./clusters/dev
  prune: true
  sourceRef:
    kind: GitRepository
    name: myapp-gitops
    namespace: flux-system

5. Convert values.yaml to ConfigMap with Kustomize patch

In clusters/dev/kustomization.yaml, reference a generator:

generatorOptions:
  disableNameSuffixHash: true

configMapGenerator:
  - name: myapp-values
    files:
      - values.yaml

🛠 Flux Setup
flux bootstrap github \
  --owner=your-org \
  --repository=myapp-gitops \
  --path=clusters/dev \
  --personal

🔁 What Flux Will Do
Pull the Helm chart myapp from https://charts.example.com/

Apply the version constraint ~1.2.0

Pull environment-specific overrides from values.yaml via ConfigMap

Install the release into the dev namespace

Sync every minute

🔁 What Flux Will Do
Pull the Helm chart myapp from https://charts.example.com/

Apply the version constraint ~1.2.0

Pull environment-specific overrides from values.yaml via ConfigMap

Install the release into the dev namespace

Sync every minute

✅ To Add a prod Environment
Just copy clusters/dev/ to clusters/prod/ with:

Different values.yaml (e.g. different replicaCount, image.tag)

Different namespace (like prod)

Possibly different chart version (e.g., "~1.3.0" instead of "~1.2.0")



templates:
  ".dockerconfigjson":
    text: |-
      {{- $username := .Values.vso.imagePullSecret.username -}}
      {{- $auths := dict -}}

      {{- range $host := .Values.vso.imagePullSecret.afHosts }}
        {{- $keyPath := printf "%s/%s@%s" (.Values.vso.vaultMsaPath) $username $host -}}
        {{- $password := (get .Secrets $keyPath) -}}
        {{- $config := dict "username" $username "password" $password -}}
        {{- $_ := set $config "auth" (list $username ":" $password | join "" | b64enc) -}}
        {{- $_ := set $auths $host $config -}}
      {{- end }}

      {{- mustToJson (dict "auths" $auths) -}}


  templates:
  ".dockerconfigjson":
    text: |-
      {{- $username := .Values.vso.imagePullSecret.username -}}
      {{- $auths := dict -}}
      {{- range $host := .Values.vso.imagePullSecret.afHosts }}
        {{- $password := (get .Secrets (printf "%s@%s" $username $host)) -}}
        {{- $config := dict "username" $username "password" $password -}}
        {{- $_ := set $config "auth" (list $username ":" $password | join "" | b64enc) -}}
        {{- $_ := set $auths $host $config -}}
      {{- end }}
      {{- mustToJson (dict "auths" $auths) -}}


  templates:
  ".dockerconfigjson":
    text: |-
      {{- $username := .Values.vso.imagePullSecret.username -}}
      {{- $auths := dict -}}

      {{- range $afHost := .Values.vso.imagePullSecret.afHosts }}
        {{- $keyPath := printf "%s@%s" $username $afHost -}}
        {{- $password := (get .Secrets $keyPath) -}}
        {{- $config := dict "username" $username "password" $password -}}
        {{- $_ := set $config "auth" (list $username ":" $password | join "" | b64enc) -}}
        {{- $_ := set $auths $afHost $config -}}
      {{- end }}

      {{- mustToJson (dict "auths" $auths) -}}